// Add this to your HTML template:

function showFixButton() {
    const fixButton = document.createElement('button');
    fixButton.id = 'fix-coverage-btn';
    fixButton.className = 'fix-button';
    fixButton.innerHTML = `
        <span class="fix-icon">ðŸ”§</span>
        <span class="fix-text">FIX DOCUMENT COVERAGE NOW</span>
        <span class="fix-subtext">Restore complete institutional memory</span>
    `;
    fixButton.onclick = executeOneClickFix;
    
    // Add prominent styling
    const fixStyles = `
        <style>
        .fix-button {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            color: white;
            border: none;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(220, 38, 38, 0.3);
            cursor: pointer;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            z-index: 1000;
            animation: pulse 2s infinite;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-width: 200px;
        }
        
        .fix-button:hover {
            transform: scale(1.05);
            box-shadow: 0 12px 35px rgba(220, 38, 38, 0.4);
        }
        
        .fix-icon {
            font-size: 1.5rem;
            margin-bottom: 0.25rem;
        }
        
        .fix-text {
            font-weight: bold;
            font-size: 0.875rem;
            line-height: 1.1;
        }
        
        .fix-subtext {
            font-size: 0.75rem;
            opacity: 0.9;
            margin-top: 0.25rem;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }
        </style>
    `;
    
    document.head.insertAdjacentHTML('beforeend', fixStyles);
    document.body.appendChild(fixButton);
}

async function executeOneClickFix() {
    const button = document.getElementById('fix-coverage-btn');
    const originalContent = button.innerHTML;
    
    button.innerHTML = `
        <span class="fix-icon">âš¡</span>
        <span class="fix-text">PROCESSING...</span>
        <span class="fix-subtext">This may take a few minutes</span>
    `;
    button.disabled = true;
    
    try {
        const response = await fetch('/api/fix-document-coverage', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({org_id: ORG_ID})
        });
        
        const result = await response.json();
        
        if (result.success) {
            button.innerHTML = `
                <span class="fix-icon">âœ…</span>
                <span class="fix-text">FIXED!</span>
                <span class="fix-subtext">${result.final_coverage} coverage</span>
            `;
            
            // Remove button after success
            setTimeout(() => {
                button.remove();
                showSuccessMessage(`Document coverage fixed! ${result.final_coverage} of documents are now processed and searchable.`);
                // Refresh the page to show updated status
                setTimeout(() => window.location.reload(), 3000);
            }, 3000);
            
        } else {
            throw new Error(result.message || 'Fix failed');
        }
        
    } catch (error) {
        button.innerHTML = originalContent;
        button.disabled = false;
        showErrorMessage(`Fix failed: ${error.message}`);
    }
}

// Show fix button if coverage is incomplete
function checkAndShowFixButton() {
    fetch(`/api/document-coverage-status?org_id=${ORG_ID}`)
        .then(response => response.json())
        .then(status => {
            if (status.coverage_analysis.coverage_percentage < 100) {
                showFixButton();
            }
        })
        .catch(console.error);
}

// Auto-check on page load
document.addEventListener('DOMContentLoaded', checkAndShowFixButton);