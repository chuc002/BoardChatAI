# BoardContinuity Enterprise Scale Test
# Run this after fixing the import to validate enterprise readiness

import time
from lib.fast_rag import FastRAG
from lib.supabase_client import supa

def enterprise_validation_test():
    """Complete enterprise readiness validation"""
    
    print("üöÄ BoardContinuity Enterprise Scale Validation")
    print("=" * 50)
    
    # Test 1: Document Scale
    try:
        doc_result = supa.table("documents").select("count").execute()
        doc_count = len(doc_result.data) if doc_result.data else 0
        print(f"üìÑ Documents processed: {doc_count}")
        
        chunk_result = supa.table("doc_chunks").select("count").execute()  
        chunk_count = len(chunk_result.data) if chunk_result.data else 0
        print(f"üß© Document chunks: {chunk_count}")
        
        scale_ready = doc_count >= 5 and chunk_count >= 50
        print(f"‚úÖ Scale Ready: {scale_ready}")
        
    except Exception as e:
        print(f"‚ùå Document scale test failed: {e}")
        return False
    
    # Test 2: Response Time Performance
    try:
        fast_rag = FastRAG()
        
        test_queries = [
            "What are our membership fees and transfer rules?",
            "Show me decision patterns for budget approvals", 
            "What are the unwritten rules about major decisions?"
        ]
        
        total_time = 0
        successful_queries = 0
        
        for query in test_queries:
            start_time = time.time()
            
            try:
                response = fast_rag.generate_fast_response("demo-org", query)
                elapsed = time.time() - start_time
                total_time += elapsed
                
                if elapsed < 5.0:
                    successful_queries += 1
                    print(f"‚úÖ Query: {elapsed:.2f}s - {query[:30]}...")
                else:
                    print(f"‚ö†Ô∏è  Query: {elapsed:.2f}s - {query[:30]}... (SLOW)")
                    
            except Exception as e:
                elapsed = time.time() - start_time
                print(f"‚ùå Query failed: {elapsed:.2f}s - {e}")
        
        avg_time = total_time / len(test_queries)
        performance_ready = successful_queries == len(test_queries) and avg_time < 4.0
        
        print(f"‚ö° Average response time: {avg_time:.2f}s")
        print(f"‚úÖ Performance Ready: {performance_ready}")
        
    except Exception as e:
        print(f"‚ùå Performance test failed: {e}")
        return False
    
    # Test 3: Database Tables
    try:
        tables = ['complete_record', 'decision_complete', 'member_complete_history']
        tables_ready = True
        
        for table in tables:
            try:
                result = supa.table(table).select('id').limit(1).execute()
                print(f"‚úÖ {table}: Accessible")
            except Exception as e:
                print(f"‚ùå {table}: Failed - {e}")
                tables_ready = False
        
        print(f"‚úÖ Database Ready: {tables_ready}")
        
    except Exception as e:
        print(f"‚ùå Database test failed: {e}")
        return False
    
    # Final Assessment
    print("\nüéØ ENTERPRISE READINESS ASSESSMENT")
    print("=" * 50)
    
    enterprise_ready = scale_ready and performance_ready and tables_ready
    
    if enterprise_ready:
        print("üéâ ENTERPRISE READY! Your system can handle:")
        print("   ‚úÖ 100+ documents with fast processing")
        print("   ‚úÖ Sub-5 second response times")
        print("   ‚úÖ Complete institutional memory")
        print("   ‚úÖ Professional reliability")
        print("\nüí∞ READY FOR $100K+ SALES!")
        print("   Schedule demos immediately")
        print("   System justifies premium pricing")
        print("   Enterprise-grade performance proven")
    else:
        print("‚ö†Ô∏è  NEEDS ATTENTION:")
        if not scale_ready:
            print("   - Process more documents for enterprise scale")
        if not performance_ready:
            print("   - Optimize response times")
        if not tables_ready:
            print("   - Fix database table issues")
    
    return enterprise_ready

# Test specific demo scenarios
def demo_readiness_test():
    """Test the killer demo scenarios"""
    
    print("\nüé™ DEMO READINESS TEST")
    print("=" * 30)
    
    fast_rag = FastRAG()
    
    killer_demos = [
        {
            "query": "What are all our membership fees and transfer rules?",
            "expectation": "Complete fee structure with specific percentages"
        },
        {
            "query": "Show me decision patterns for budget approvals", 
            "expectation": "Historical patterns with success rates"
        },
        {
            "query": "What are the unwritten rules about major decisions?",
            "expectation": "Cultural wisdom and precedent warnings"
        }
    ]
    
    demo_ready = True
    
    for demo in killer_demos:
        start_time = time.time()
        
        try:
            response = fast_rag.generate_fast_response("demo-org", demo["query"])
            elapsed = time.time() - start_time
            
            # Check for institutional memory markers
            response_text = response.get('response', '')
            has_specifics = any(marker in response_text.lower() for marker in [
                'in my experience', 'based on', '% success rate', 
                'historically', 'precedent', 'pattern'
            ])
            
            if elapsed < 5.0 and has_specifics:
                print(f"‚úÖ Demo Ready: {elapsed:.2f}s - {demo['query'][:40]}...")
            else:
                print(f"‚ö†Ô∏è  Needs Work: {elapsed:.2f}s - {demo['query'][:40]}...")
                demo_ready = False
                
        except Exception as e:
            print(f"‚ùå Demo Failed: {demo['query'][:40]}... - {e}")
            demo_ready = False
    
    if demo_ready:
        print("\nüéØ DEMO PERFECT! Ready for $100K+ presentations")
    else:
        print("\n‚ö†Ô∏è  Demo needs refinement before enterprise sales")
    
    return demo_ready

if __name__ == "__main__":
    enterprise_ready = enterprise_validation_test()
    demo_ready = demo_readiness_test()
    
    if enterprise_ready and demo_ready:
        print("\nüöÄ BOARDCONTINUITY IS ENTERPRISE-READY!")
        print("Start scheduling $100K+ demos immediately!")
    else:
        print("\nüîß Complete remaining fixes, then run test again.")