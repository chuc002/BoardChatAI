// Add this JavaScript to your HTML template for document management:

async function checkDocumentCoverage() {
    try {
        const response = await fetch(`/api/document-coverage-status?org_id=${ORG_ID}`);
        const status = await response.json();
        
        updateCoverageDisplay(status);
        
        if (status.coverage_analysis.coverage_percentage < 100) {
            showProcessingAlert(status);
        }
        
    } catch (error) {
        console.error('Coverage check failed:', error);
    }
}

function updateCoverageDisplay(status) {
    const coverageDiv = document.getElementById('coverage-display');
    
    if (!coverageDiv) return;
    
    const coverage = status.coverage_analysis;
    const isComplete = coverage.is_complete;
    
    coverageDiv.innerHTML = `
        <div class="coverage-summary ${isComplete ? 'complete' : 'incomplete'}">
            <h4>Document Processing Status</h4>
            <div class="coverage-stats">
                <div class="stat">
                    <span class="number">${coverage.coverage_percentage}%</span>
                    <span class="label">Coverage</span>
                </div>
                <div class="stat">
                    <span class="number">${coverage.processed_documents}</span>
                    <span class="label">Processed</span>
                </div>
                <div class="stat">
                    <span class="number">${coverage.unprocessed_documents}</span>
                    <span class="label">Pending</span>
                </div>
            </div>
            
            ${!isComplete ? `
                <div class="action-buttons">
                    <button onclick="processAllDocuments()" class="btn-primary">
                        Process All Documents
                    </button>
                    <button onclick="showDetailedStatus()" class="btn-secondary">
                        View Details
                    </button>
                </div>
            ` : `
                <div class="success-message">
                    ✅ All documents processed successfully!
                </div>
            `}
        </div>
    `;
}

async function processAllDocuments() {
    const button = event.target;
    button.disabled = true;
    button.textContent = 'Processing...';
    
    try {
        const response = await fetch('/api/process-all-documents', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                org_id: ORG_ID,
                force_reprocess: false
            })
        });
        
        const result = await response.json();
        
        if (result.processing_complete) {
            showSuccessMessage(`Processing complete! ${result.results.final_coverage} coverage achieved.`);
            // Refresh coverage display
            setTimeout(checkDocumentCoverage, 2000);
        } else {
            showErrorMessage('Processing failed: ' + (result.error || 'Unknown error'));
        }
        
    } catch (error) {
        showErrorMessage('Processing failed: ' + error.message);
    } finally {
        button.disabled = false;
        button.textContent = 'Process All Documents';
    }
}

async function repairDocumentCoverage() {
    try {
        const response = await fetch('/api/repair-document-coverage', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                org_id: ORG_ID,
                repair_actions: ['force_reprocess_failed', 'process_pending_documents']
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            showSuccessMessage(`Repair complete! ${result.final_coverage.coverage_percentage}% coverage achieved.`);
            checkDocumentCoverage();
        } else {
            showErrorMessage('Repair failed: ' + (result.error || 'Unknown error'));
        }
        
    } catch (error) {
        showErrorMessage('Repair failed: ' + error.message);
    }
}

function showProcessingAlert(status) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'processing-alert';
    alertDiv.innerHTML = `
        <div class="alert-content">
            <h4>⚠️ Incomplete Document Processing</h4>
            <p>Only ${status.coverage_analysis.coverage_percentage}% of your documents are processed and searchable.</p>
            <p>The AI can only reference information from processed documents, limiting institutional memory completeness.</p>
            
            <div class="unprocessed-docs">
                <h5>Documents needing processing:</h5>
                <ul>
                    ${status.processing_issues.map(issue => `
                        <li>${issue.filename} - ${issue.category}</li>
                    `).join('')}
                </ul>
            </div>
            
            <div class="alert-actions">
                <button onclick="processAllDocuments()" class="btn-primary">
                    Fix Now - Process All Documents
                </button>
                <button onclick="dismissAlert(this)" class="btn-secondary">
                    Dismiss
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(alertDiv);
}

// Add this CSS for the processing alert:
const alertStyles = `
<style>
.processing-alert {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
}

.alert-content {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    max-width: 600px;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px rgba(0,0,0,0.3);
}

.coverage-summary.incomplete {
    border: 2px solid #f59e0b;
    background: #fef3c7;
    padding: 1rem;
    border-radius: 8px;
    margin: 1rem 0;
}

.coverage-summary.complete {
    border: 2px solid #10b981;
    background: #d1fae5;
    padding: 1rem;
    border-radius: 8px;
    margin: 1rem 0;
}

.coverage-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin: 1rem 0;
}

.stat {
    text-align: center;
}

.stat .number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: #1f2937;
}

.stat .label {
    display: block;
    font-size: 0.875rem;
    color: #6b7280;
    margin-top: 0.25rem;
}

.action-buttons {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
}

.btn-primary {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
}

.btn-primary:hover {
    background: #2563eb;
}

.btn-secondary {
    background: #6b7280;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
}

.btn-secondary:hover {
    background: #4b5563;
}
</style>
`;

// Inject styles
document.head.insertAdjacentHTML('beforeend', alertStyles);

// Auto-check coverage on page load
document.addEventListener('DOMContentLoaded', checkDocumentCoverage);